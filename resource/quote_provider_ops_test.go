/*
 * Copyright (C) 2022 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */
package resource

import (
	"encoding/json"
	"fmt"
	"intel/isecl/scs/v5/config"
	"intel/isecl/scs/v5/domain"
	"intel/isecl/scs/v5/domain/mocks"
	"intel/isecl/scs/v5/repository/postgres/mock"
	"intel/isecl/scs/v5/types"
	"net/http"
	"net/http/httptest"

	"github.com/google/uuid"
	"github.com/gorilla/mux"
	consts "github.com/intel-secl/intel-secl/v5/pkg/lib/common/constants"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

// /pckCert resource validation
var _ = Describe("Get PckCertificate Validation", func() {
	var router *mux.Router
	var w *httptest.ResponseRecorder

	var conf *config.Configuration
	var client domain.HttpClient

	db := getMockDatabase()
	conf = config.Load(testConfigFilePath)
	client = mocks.NewClientMock(200)

	BeforeEach(func() {
		router = mux.NewRouter()
	})

	Describe("getPckCertificate Resource validation", func() {
		Context("getPckCertificate request validation", func() {
			It("Should return StatusBadRequest - Insufficient query parameters", func() {
				QuoteProviderOps(router, db, conf, &client)
				req, err := http.NewRequest(http.MethodGet, "/pckcert", nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusBadRequest - Invalid value for query param", func() {
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcert?encrypted_ppid=82b1bc02923_1d52e27b4d7bf3fd2a21df8fd4ced21e11e42c96c27d959be56f2973d80aff2b359db8590d2f05d4175c80755dfb0a3c7111e3be35792cf80c3ca5708481e6a1448e51021df0ccf525002b8c31a707171847b49b969491b6bc339837fe62881e39e064620f6c09a1cbdcd29ab7d5922f961ef1f20d6a294cb92ff9a5f42f82baefefe0eabb25872716cf1ea55cd5f65d903ee5605d89e26cb61cc2e5b064409cc53e012b5ada765b7c28dcb3d8d3d2418b56d10abcecd19c920ba3941240a659d42a5212da9ea938b73b6b78366a09b26994634e95b2a01915689266247acafa8545ac6b734843e03c37ee2200e0f6c48589e4ad0d6dc4fb65be5e9242ed0c4122caf720962eac6f7a2ce43ff8b00ea566e1c087d18ae08d1417bb072ac196b050849f97235c40486453d6ab19c9859951b401edb69abddb074c4b1aa1a306d4d631fcef18d46c44af74cd9c117ce817d582c70fa3ec5b7b3037b16e166165d43156c3e2b463adef2615940e9dd119582ca14e152ca3d654289ea&cpusvn=1bf8deed6f929c_e40bd658e61ea722eb&pcesvn=0_a00&pceid=0_000&qeid=0518145496973c5e69577195511e_9080")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusBadRequest - Invalid query param", func() {
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcert?encrypted_ppid_test=82b1bc029231d52e27b4d7bf3fd2a21df8fd4ced21e11e42c96c27d959be56f2973d80aff2b359db8590d2f05d4175c80755dfb0a3c7111e3be35792cf80c3ca5708481e6a1448e51021df0ccf525002b8c31a707171847b49b969491b6bc339837fe62881e39e064620f6c09a1cbdcd29ab7d5922f961ef1f20d6a294cb92ff9a5f42f82baefefe0eabb25872716cf1ea55cd5f65d903ee5605d89e26cb61cc2e5b064409cc53e012b5ada765b7c28dcb3d8d3d2418b56d10abcecd19c920ba3941240a659d42a5212da9ea938b73b6b78366a09b26994634e95b2a01915689266247acafa8545ac6b734843e03c37ee2200e0f6c48589e4ad0d6dc4fb65be5e9242ed0c4122caf720962eac6f7a2ce43ff8b00ea566e1c087d18ae08d1417bb072ac196b050849f97235c40486453d6ab19c9859951b401edb69abddb074c4b1aa1a306d4d631fcef18d46c44af74cd9c117ce817d582c70fa3ec5b7b3037b16e166165d43156c3e2b463adef2615940e9dd119582ca14e152ca3d654289ea&cpusvn_test=1bf8deed6f929ce40bd658e61ea722eb&pcesvn_test=0a00&pceid_test=0000&qeid_test=0518145496973c5e69577195511e9080")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusNotFound - Platform Info Not found request", func() {

				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcert?encrypted_ppid=82b1bc029231d52e27b4d7bf3fd2a21df8fd4ced21e11e42c96c27d959be56f2973d80aff2b359db8590d2f05d4175c80755dfb0a3c7111e3be35792cf80c3ca5708481e6a1448e51021df0ccf525002b8c31a707171847b49b969491b6bc339837fe62881e39e064620f6c09a1cbdcd29ab7d5922f961ef1f20d6a294cb92ff9a5f42f82baefefe0eabb25872716cf1ea55cd5f65d903ee5605d89e26cb61cc2e5b064409cc53e012b5ada765b7c28dcb3d8d3d2418b56d10abcecd19c920ba3941240a659d42a5212da9ea938b73b6b78366a09b26994634e95b2a01915689266247acafa8545ac6b734843e03c37ee2200e0f6c48589e4ad0d6dc4fb65be5e9242ed0c4122caf720962eac6f7a2ce43ff8b00ea566e1c087d18ae08d1417bb072ac196b050849f97235c40486453d6ab19c9859951b401edb69abddb074c4b1aa1a306d4d631fcef18d46c44af74cd9c117ce817d582c70fa3ec5b7b3037b16e166165d43156c3e2b463adef2615940e9dd119582ca14e152ca3d654289ea&cpusvn=1bf8deed6f929ce40bd658e61ea722eb&pcesvn=0a00&pceid=0000&qeid=0518145496973c5e69577195511e9080")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusNotFound))
			})

			It("Should return StatusInternalServerError - PCKCert Info Not found request", func() {

				platform := &types.Platform{
					QeID:     "0518145496973c5e69577195511e9080",
					PceID:    "0000",
					CPUSvn:   "1bf8deed6f929ce40bd658e61ea722eb",
					PceSvn:   "0a00",
					Encppid:  "00f51b4272163732be2101ee62dfdb175205a5179c5b5faff4b2ae103cb1150ef7d4e6041775543930600e41dd2e6aee7f40790f5a0380f6b29b1f1f7e6aad75bfa666153bb325c6db5b67f694d14bff98996c4994ce153278bfeb1b455dd4acbeacc97df6a3cd439a838218c1e07dae91a62195b803b9d3808d5b8470d46b0af3f275b6f6573871eb4eeb43ed9c5a5647729f25648fa74f1ce43621618b266abde6f44e92ce65bbbbe2c50e3e7a8b84d1ed38f53a1d99d3f15fc8c39b0ee568580c37a4eb19dbe87cd447c78f05544684701c01e64e0273dc69c27e46f732f7a7ee8cc4dfaf3b921bf6bbc3ee83f8de5f4e86039595cddaf7cadfce599f0eb92509ff2a90d189bda51fdd298fa1cffd4e8d79095f104c073a2b71cf61c727f4e5718cb7ea2f8fc6d7694bf3b40764234dfbe0d35f40f557545e1729ca639be4f1bcdc9028cb590b3ad3fd176bfea3cef13e57db057b3bae7ae8553a454515aecb21e4c58c670b19d8ee12668ab8af16d56b285153589eb85d15cd9e56fe459b",
					Fmspc:    "20606a000000",
					Ca:       "processor",
					Manifest: "178e874b49e44aa599bb3057170925b41d6e010000000000000000000000000084947ac684404189902a7e76cd658926bc010100000000000000000000000000e5db57cfd1af3e45ddfbd7f52e74a44871d542e3893c9f6f88ef999a7969eacc38e156d8233e6479997f6daa3553d902bb6a7fd6e6db21c43c13993c91c2eb95b6654b70d3e1602d5c236f9c5e8209a6a9923f49628eb7ba934913ccee4ae3df1c9ce11d0dac1c2e6ebbeb7b036e1288ad98d0aac44e5dbe3e01ea40eb7301c513c388d7e87b6630fcee23dccc28e5466a3669137e79021e386db75569606a481ac81bcd03fdc30a142bce8cca274dc044f2b40dc9abaef952bb4f0d01058d590d6950cd56bd036c7385272789e38de9b7302fafd5514248de83c18aedc9fb3c4a60754b41d8038be2c85d9e109742450b76989ff262cb0a7a979546018c7c76109ec6dd7965eead462bbd1edf6124e4a7da00de497408e44869496138cc1383f2caef7b6bf456c1f494c2b539e1741d904515414816a5096e96350b5decc84cdb9c29fe6ffa7a1982b55fe6fb258e18f03c1724b296aab446a9f4e10de1d49485f4360dfade7bc6abf70c0f1ed59c15ab30face19e3cfee43e1bee2f2800095576af52b46344ea4e7e08c2bc1d568dd01000100bcf7744b0929b513d15794280f82233b5684b73af7f86c073d1ecec86f6cd34c0000010001000000fd8f5c411b614b97a74796f08926757b
					HwUUID:   uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e2"),
				}

				db.PlatformRepository().Create(platform)
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcert?encrypted_ppid=82b1bc029231d52e27b4d7bf3fd2a21df8fd4ced21e11e42c96c27d959be56f2973d80aff2b359db8590d2f05d4175c80755dfb0a3c7111e3be35792cf80c3ca5708481e6a1448e51021df0ccf525002b8c31a707171847b49b969491b6bc339837fe62881e39e064620f6c09a1cbdcd29ab7d5922f961ef1f20d6a294cb92ff9a5f42f82baefefe0eabb25872716cf1ea55cd5f65d903ee5605d89e26cb61cc2e5b064409cc53e012b5ada765b7c28dcb3d8d3d2418b56d10abcecd19c920ba3941240a659d42a5212da9ea938b73b6b78366a09b26994634e95b2a01915689266247acafa8545ac6b734843e03c37ee2200e0f6c48589e4ad0d6dc4fb65be5e9242ed0c4122caf720962eac6f7a2ce43ff8b00ea566e1c087d18ae08d1417bb072ac196b050849f97235c40486453d6ab19c9859951b401edb69abddb074c4b1aa1a306d4d631fcef18d46c44af74cd9c117ce817d582c70fa3ec5b7b3037b16e166165d43156c3e2b463adef2615940e9dd119582ca14e152ca3d654289ea&cpusvn=1bf8deed6f929ce40bd658e61ea722eb&pcesvn=0a00&pceid=0000&qeid=0518145496973c5e69577195511e9080")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusInternalServerError))
			})

			It("Should return StatusInternalServerError - PckCert Info Not found request", func() {

				platform := &types.Platform{
					QeID:     "0518145496973c5e69577195511e9080",
					PceID:    "0000",
					CPUSvn:   "1bf8deed6f929ce40bd658e61ea722eb",
					PceSvn:   "0a00",
					Encppid:  "00f51b4272163732be2101ee62dfdb175205a5179c5b5faff4b2ae103cb1150ef7d4e6041775543930600e41dd2e6aee7f40790f5a0380f6b29b1f1f7e6aad75bfa666153bb325c6db5b67f694d14bff98996c4994ce153278bfeb1b455dd4acbeacc97df6a3cd439a838218c1e07dae91a62195b803b9d3808d5b8470d46b0af3f275b6f6573871eb4eeb43ed9c5a5647729f25648fa74f1ce43621618b266abde6f44e92ce65bbbbe2c50e3e7a8b84d1ed38f53a1d99d3f15fc8c39b0ee568580c37a4eb19dbe87cd447c78f05544684701c01e64e0273dc69c27e46f732f7a7ee8cc4dfaf3b921bf6bbc3ee83f8de5f4e86039595cddaf7cadfce599f0eb92509ff2a90d189bda51fdd298fa1cffd4e8d79095f104c073a2b71cf61c727f4e5718cb7ea2f8fc6d7694bf3b40764234dfbe0d35f40f557545e1729ca639be4f1bcdc9028cb590b3ad3fd176bfea3cef13e57db057b3bae7ae8553a454515aecb21e4c58c670b19d8ee12668ab8af16d56b285153589eb85d15cd9e56fe459b",
					Fmspc:    "20606a000000",
					Ca:       "processor",
					Manifest: "178e874b49e44aa599bb3057170925b41d6e010000000000000000000000000084947ac684404189902a7e76cd658926bc010100000000000000000000000000e5db57cfd1af3e45ddfbd7f52e74a44871d542e3893c9f6f88ef999a7969eacc38e156d8233e6479997f6daa3553d902bb6a7fd6e6db21c43c13993c91c2eb95b6654b70d3e1602d5c236f9c5e8209a6a9923f49628eb7ba934913ccee4ae3df1c9ce11d0dac1c2e6ebbeb7b036e1288ad98d0aac44e5dbe3e01ea40eb7301c513c388d7e87b6630fcee23dccc28e5466a3669137e79021e386db75569606a481ac81bcd03fdc30a142bce8cca274dc044f2b40dc9abaef952bb4f0d01058d590d6950cd56bd036c7385272789e38de9b7302fafd5514248de83c18aedc9fb3c4a60754b41d8038be2c85d9e109742450b76989ff262cb0a7a979546018c7c76109ec6dd7965eead462bbd1edf6124e4a7da00de497408e44869496138cc1383f2caef7b6bf456c1f494c2b539e1741d904515414816a5096e96350b5decc84cdb9c29fe6ffa7a1982b55fe6fb258e18f03c1724b296aab446a9f4e10de1d49485f4360dfade7bc6abf70c0f1ed59c15ab30face19e3cfee43e1bee2f2800095576af52b46344ea4e7e08c2bc1d568dd01000100bcf7744b0929b513d15794280f82233b5684b73af7f86c073d1ecec86f6cd34c0000010001000000fd8f5c411b614b97a74796f08926757b
					HwUUID:   uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e2"),
				}
				db.PlatformRepository().Create(platform)

				newPckCert := &types.PckCert{
					QeID:      "0518145496973c5e69577195511e9080",
					PceID:     "0000",
					CertIndex: 0,
					Tcbms:     []string{"030300000000000000000000000000000A00"},
					Fmspc:     "20606a000000",
					PckCerts:  []string{"-----BEGIN%20CERTIFICATE-----%0AMIIE9DCCBJqgAwIBAgIUb6rZwuxZc5cIkp6%2Foqqz7HdGyFwwCgYIKoZIzj0EAwIw%0AcDEiMCAGA1UEAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwR%0ASW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQI%0ADAJDQTELMAkGA1UEBhMCVVMwHhcNMjIwNjIxMTEyNDU2WhcNMjkwNjIxMTEyNDU2%0AWjBwMSIwIAYDVQQDDBlJbnRlbCBTR1ggUENLIENlcnRpZmljYXRlMRowGAYDVQQK%0ADBFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNV%0ABAgMAkNBMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOB3%0AWFm1ziJAlu79StgxfAuz8AWCkoiraneuAGgrFExeiukczJvjWdtDTM2O7w8GiZAt%0A1h84AyDRUb%2BHoNaflACjggMQMIIDDDAfBgNVHSMEGDAWgBRZI9OnSqhjVC45cK3g%0ADwcrVyQqtzBvBgNVHR8EaDBmMGSgYqBghl5odHRwczovL3NieC5hcGkudHJ1c3Rl%0AZHNlcnZpY2VzLmludGVsLmNvbS9zZ3gvY2VydGlmaWNhdGlvbi92My9wY2tjcmw%2F%0AY2E9cGxhdGZvcm0mZW5jb2Rpbmc9ZGVyMB0GA1UdDgQWBBQ6mE6WHjgoVSRiUaG%2F%0A0QmQDpX7LjAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADCCAjkGCSqGSIb4%0ATQENAQSCAiowggImMB4GCiqGSIb4TQENAQEEEGzzoSC5Btq3aBE%2BWYxHhwUwggFj%0ABgoqhkiG%2BE0BDQECMIIBUzAQBgsqhkiG%2BE0BDQECAQIBATAQBgsqhkiG%2BE0BDQEC%0AAgIBATAQBgsqhkiG%2BE0BDQECAwIBADAQBgsqhkiG%2BE0BDQECBAIBADAQBgsqhkiG%0A%2BE0BDQECBQIBADAQBgsqhkiG%2BE0BDQECBgIBADAQBgsqhkiG%2BE0BDQECBwIBADAQ%0ABgsqhkiG%2BE0BDQECCAIBADAQBgsqhkiG%2BE0BDQECCQIBADAQBgsqhkiG%2BE0BDQEC%0ACgIBADAQBgsqhkiG%2BE0BDQECCwIBADAQBgsqhkiG%2BE0BDQECDAIBADAQBgsqhkiG%0A%2BE0BDQECDQIBADAQBgsqhkiG%2BE0BDQECDgIBADAQBgsqhkiG%2BE0BDQECDwIBADAQ%0ABgsqhkiG%2BE0BDQECEAIBADAQBgsqhkiG%2BE0BDQECEQIBCTAfBgsqhkiG%2BE0BDQEC%0AEgQQAQEAAAAAAAAAAAAAAAAAADAQBgoqhkiG%2BE0BDQEDBAIAADAUBgoqhkiG%2BE0B%0ADQEEBAYQYGoAAAAwDwYKKoZIhvhNAQ0BBQoBATAeBgoqhkiG%2BE0BDQEGBBDjJ4f6%0AieS5MJrtZWT28t9KMEQGCiqGSIb4TQENAQcwNjAQBgsqhkiG%2BE0BDQEHAQEB%2FzAQ%0ABgsqhkiG%2BE0BDQEHAgEBADAQBgsqhkiG%2BE0BDQEHAwEB%2FzAKBggqhkjOPQQDAgNI%0AADBFAiBJwRZ5Dkvmz41SMH%2FFojZqiPxfzpQo78iqcvTdo0DwTQIhAPzZkuFcwZUV%0Al0yBja8lgLWp%2F8eMKpx5hOAw1dDV2iST%0A-----END%20CERTIFICATE-----%0A"},
				}
				db.PckCertRepository().Create(newPckCert)

				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcert?encrypted_ppid=82b1bc029231d52e27b4d7bf3fd2a21df8fd4ced21e11e42c96c27d959be56f2973d80aff2b359db8590d2f05d4175c80755dfb0a3c7111e3be35792cf80c3ca5708481e6a1448e51021df0ccf525002b8c31a707171847b49b969491b6bc339837fe62881e39e064620f6c09a1cbdcd29ab7d5922f961ef1f20d6a294cb92ff9a5f42f82baefefe0eabb25872716cf1ea55cd5f65d903ee5605d89e26cb61cc2e5b064409cc53e012b5ada765b7c28dcb3d8d3d2418b56d10abcecd19c920ba3941240a659d42a5212da9ea938b73b6b78366a09b26994634e95b2a01915689266247acafa8545ac6b734843e03c37ee2200e0f6c48589e4ad0d6dc4fb65be5e9242ed0c4122caf720962eac6f7a2ce43ff8b00ea566e1c087d18ae08d1417bb072ac196b050849f97235c40486453d6ab19c9859951b401edb69abddb074c4b1aa1a306d4d631fcef18d46c44af74cd9c117ce817d582c70fa3ec5b7b3037b16e166165d43156c3e2b463adef2615940e9dd119582ca14e152ca3d654289ea&cpusvn=1bf8deed6f929ce40bd658e61ea722eb&pcesvn=0a00&pceid=0000&qeid=0518145496973c5e69577195511e9080")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusInternalServerError))
			})

			It("Should return StatusOK - Valid request", func() {

				newPckCert := &types.PckCert{
					QeID:      "0518145496973c5e69577195511e9080",
					PceID:     "0000",
					CertIndex: 0,
					Tcbms:     []string{"030300000000000000000000000000000A00"},
					Fmspc:     "20606a000000",
					PckCerts:  []string{"-----BEGIN%20CERTIFICATE-----%0AMIIE9DCCBJqgAwIBAgIUb6rZwuxZc5cIkp6%2Foqqz7HdGyFwwCgYIKoZIzj0EAwIw%0AcDEiMCAGA1UEAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwR%0ASW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQI%0ADAJDQTELMAkGA1UEBhMCVVMwHhcNMjIwNjIxMTEyNDU2WhcNMjkwNjIxMTEyNDU2%0AWjBwMSIwIAYDVQQDDBlJbnRlbCBTR1ggUENLIENlcnRpZmljYXRlMRowGAYDVQQK%0ADBFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNV%0ABAgMAkNBMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOB3%0AWFm1ziJAlu79StgxfAuz8AWCkoiraneuAGgrFExeiukczJvjWdtDTM2O7w8GiZAt%0A1h84AyDRUb%2BHoNaflACjggMQMIIDDDAfBgNVHSMEGDAWgBRZI9OnSqhjVC45cK3g%0ADwcrVyQqtzBvBgNVHR8EaDBmMGSgYqBghl5odHRwczovL3NieC5hcGkudHJ1c3Rl%0AZHNlcnZpY2VzLmludGVsLmNvbS9zZ3gvY2VydGlmaWNhdGlvbi92My9wY2tjcmw%2F%0AY2E9cGxhdGZvcm0mZW5jb2Rpbmc9ZGVyMB0GA1UdDgQWBBQ6mE6WHjgoVSRiUaG%2F%0A0QmQDpX7LjAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADCCAjkGCSqGSIb4%0ATQENAQSCAiowggImMB4GCiqGSIb4TQENAQEEEGzzoSC5Btq3aBE%2BWYxHhwUwggFj%0ABgoqhkiG%2BE0BDQECMIIBUzAQBgsqhkiG%2BE0BDQECAQIBATAQBgsqhkiG%2BE0BDQEC%0AAgIBATAQBgsqhkiG%2BE0BDQECAwIBADAQBgsqhkiG%2BE0BDQECBAIBADAQBgsqhkiG%0A%2BE0BDQECBQIBADAQBgsqhkiG%2BE0BDQECBgIBADAQBgsqhkiG%2BE0BDQECBwIBADAQ%0ABgsqhkiG%2BE0BDQECCAIBADAQBgsqhkiG%2BE0BDQECCQIBADAQBgsqhkiG%2BE0BDQEC%0ACgIBADAQBgsqhkiG%2BE0BDQECCwIBADAQBgsqhkiG%2BE0BDQECDAIBADAQBgsqhkiG%0A%2BE0BDQECDQIBADAQBgsqhkiG%2BE0BDQECDgIBADAQBgsqhkiG%2BE0BDQECDwIBADAQ%0ABgsqhkiG%2BE0BDQECEAIBADAQBgsqhkiG%2BE0BDQECEQIBCTAfBgsqhkiG%2BE0BDQEC%0AEgQQAQEAAAAAAAAAAAAAAAAAADAQBgoqhkiG%2BE0BDQEDBAIAADAUBgoqhkiG%2BE0B%0ADQEEBAYQYGoAAAAwDwYKKoZIhvhNAQ0BBQoBATAeBgoqhkiG%2BE0BDQEGBBDjJ4f6%0AieS5MJrtZWT28t9KMEQGCiqGSIb4TQENAQcwNjAQBgsqhkiG%2BE0BDQEHAQEB%2FzAQ%0ABgsqhkiG%2BE0BDQEHAgEBADAQBgsqhkiG%2BE0BDQEHAwEB%2FzAKBggqhkjOPQQDAgNI%0AADBFAiBJwRZ5Dkvmz41SMH%2FFojZqiPxfzpQo78iqcvTdo0DwTQIhAPzZkuFcwZUV%0Al0yBja8lgLWp%2F8eMKpx5hOAw1dDV2iST%0A-----END%20CERTIFICATE-----%0A"},
				}
				db.PckCertRepository().Create(newPckCert)

				platform := &types.Platform{
					QeID:     "0518145496973c5e69577195511e9080",
					PceID:    "0000",
					CPUSvn:   "1bf8deed6f929ce40bd658e61ea722eb",
					PceSvn:   "0a00",
					Encppid:  "00f51b4272163732be2101ee62dfdb175205a5179c5b5faff4b2ae103cb1150ef7d4e6041775543930600e41dd2e6aee7f40790f5a0380f6b29b1f1f7e6aad75bfa666153bb325c6db5b67f694d14bff98996c4994ce153278bfeb1b455dd4acbeacc97df6a3cd439a838218c1e07dae91a62195b803b9d3808d5b8470d46b0af3f275b6f6573871eb4eeb43ed9c5a5647729f25648fa74f1ce43621618b266abde6f44e92ce65bbbbe2c50e3e7a8b84d1ed38f53a1d99d3f15fc8c39b0ee568580c37a4eb19dbe87cd447c78f05544684701c01e64e0273dc69c27e46f732f7a7ee8cc4dfaf3b921bf6bbc3ee83f8de5f4e86039595cddaf7cadfce599f0eb92509ff2a90d189bda51fdd298fa1cffd4e8d79095f104c073a2b71cf61c727f4e5718cb7ea2f8fc6d7694bf3b40764234dfbe0d35f40f557545e1729ca639be4f1bcdc9028cb590b3ad3fd176bfea3cef13e57db057b3bae7ae8553a454515aecb21e4c58c670b19d8ee12668ab8af16d56b285153589eb85d15cd9e56fe459b",
					Fmspc:    "20606a000000",
					Ca:       "processor",
					Manifest: "178e874b49e44aa599bb3057170925b41d6e010000000000000000000000000084947ac684404189902a7e76cd658926bc010100000000000000000000000000e5db57cfd1af3e45ddfbd7f52e74a44871d542e3893c9f6f88ef999a7969eacc38e156d8233e6479997f6daa3553d902bb6a7fd6e6db21c43c13993c91c2eb95b6654b70d3e1602d5c236f9c5e8209a6a9923f49628eb7ba934913ccee4ae3df1c9ce11d0dac1c2e6ebbeb7b036e1288ad98d0aac44e5dbe3e01ea40eb7301c513c388d7e87b6630fcee23dccc28e5466a3669137e79021e386db75569606a481ac81bcd03fdc30a142bce8cca274dc044f2b40dc9abaef952bb4f0d01058d590d6950cd56bd036c7385272789e38de9b7302fafd5514248de83c18aedc9fb3c4a60754b41d8038be2c85d9e109742450b76989ff262cb0a7a979546018c7c76109ec6dd7965eead462bbd1edf6124e4a7da00de497408e44869496138cc1383f2caef7b6bf456c1f494c2b539e1741d904515414816a5096e96350b5decc84cdb9c29fe6ffa7a1982b55fe6fb258e18f03c1724b296aab446a9f4e10de1d49485f4360dfade7bc6abf70c0f1ed59c15ab30face19e3cfee43e1bee2f2800095576af52b46344ea4e7e08c2bc1d568dd01000100bcf7744b0929b513d15794280f82233b5684b73af7f86c073d1ecec86f6cd34c0000010001000000fd8f5c411b614b97a74796f08926757b
					HwUUID:   uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e2"),
				}

				db.PlatformRepository().Create(platform)

				var tcbInfoJson TcbInfoJSON

				json.Unmarshal(testTcbInfoJson, &tcbInfoJson)

				tcbInfo := &types.FmspcTcbInfo{
					Fmspc:   "20606a000000",
					TcbInfo: string(testTcbInfoJson),
				}
				db.FmspcTcbInfoRepository().Create(tcbInfo)

				certChain := &types.PckCertChain{
					Ca:           "processor",
					PckCertChain: "-----BEGIN%20CERTIFICATE-----%0AMIIE9DCCBJqgAwIBAgIUb6rZwuxZc5cIkp6%2Foqqz7HdGyFwwCgYIKoZIzj0EAwIw%0AcDEiMCAGA1UEAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwR%0ASW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQI%0ADAJDQTELMAkGA1UEBhMCVVMwHhcNMjIwNjIxMTEyNDU2WhcNMjkwNjIxMTEyNDU2%0AWjBwMSIwIAYDVQQDDBlJbnRlbCBTR1ggUENLIENlcnRpZmljYXRlMRowGAYDVQQK%0ADBFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNV%0ABAgMAkNBMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOB3%0AWFm1ziJAlu79StgxfAuz8AWCkoiraneuAGgrFExeiukczJvjWdtDTM2O7w8GiZAt%0A1h84AyDRUb%2BHoNaflACjggMQMIIDDDAfBgNVHSMEGDAWgBRZI9OnSqhjVC45cK3g%0ADwcrVyQqtzBvBgNVHR8EaDBmMGSgYqBghl5odHRwczovL3NieC5hcGkudHJ1c3Rl%0AZHNlcnZpY2VzLmludGVsLmNvbS9zZ3gvY2VydGlmaWNhdGlvbi92My9wY2tjcmw%2F%0AY2E9cGxhdGZvcm0mZW5jb2Rpbmc9ZGVyMB0GA1UdDgQWBBQ6mE6WHjgoVSRiUaG%2F%0A0QmQDpX7LjAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADCCAjkGCSqGSIb4%0ATQENAQSCAiowggImMB4GCiqGSIb4TQENAQEEEGzzoSC5Btq3aBE%2BWYxHhwUwggFj%0ABgoqhkiG%2BE0BDQECMIIBUzAQBgsqhkiG%2BE0BDQECAQIBATAQBgsqhkiG%2BE0BDQEC%0AAgIBATAQBgsqhkiG%2BE0BDQECAwIBADAQBgsqhkiG%2BE0BDQECBAIBADAQBgsqhkiG%0A%2BE0BDQECBQIBADAQBgsqhkiG%2BE0BDQECBgIBADAQBgsqhkiG%2BE0BDQECBwIBADAQ%0ABgsqhkiG%2BE0BDQECCAIBADAQBgsqhkiG%2BE0BDQECCQIBADAQBgsqhkiG%2BE0BDQEC%0ACgIBADAQBgsqhkiG%2BE0BDQECCwIBADAQBgsqhkiG%2BE0BDQECDAIBADAQBgsqhkiG%0A%2BE0BDQECDQIBADAQBgsqhkiG%2BE0BDQECDgIBADAQBgsqhkiG%2BE0BDQECDwIBADAQ%0ABgsqhkiG%2BE0BDQECEAIBADAQBgsqhkiG%2BE0BDQECEQIBCTAfBgsqhkiG%2BE0BDQEC%0AEgQQAQEAAAAAAAAAAAAAAAAAADAQBgoqhkiG%2BE0BDQEDBAIAADAUBgoqhkiG%2BE0B%0ADQEEBAYQYGoAAAAwDwYKKoZIhvhNAQ0BBQoBATAeBgoqhkiG%2BE0BDQEGBBDjJ4f6%0AieS5MJrtZWT28t9KMEQGCiqGSIb4TQENAQcwNjAQBgsqhkiG%2BE0BDQEHAQEB%2FzAQ%0ABgsqhkiG%2BE0BDQEHAgEBADAQBgsqhkiG%2BE0BDQEHAwEB%2FzAKBggqhkjOPQQDAgNI%0AADBFAiBJwRZ5Dkvmz41SMH%2FFojZqiPxfzpQo78iqcvTdo0DwTQIhAPzZkuFcwZUV%0Al0yBja8lgLWp%2F8eMKpx5hOAw1dDV2iST%0A-----END%20CERTIFICATE-----%0A",
				}

				db.PckCertChainRepository().Create(certChain)

				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcert?encrypted_ppid=82b1bc029231d52e27b4d7bf3fd2a21df8fd4ced21e11e42c96c27d959be56f2973d80aff2b359db8590d2f05d4175c80755dfb0a3c7111e3be35792cf80c3ca5708481e6a1448e51021df0ccf525002b8c31a707171847b49b969491b6bc339837fe62881e39e064620f6c09a1cbdcd29ab7d5922f961ef1f20d6a294cb92ff9a5f42f82baefefe0eabb25872716cf1ea55cd5f65d903ee5605d89e26cb61cc2e5b064409cc53e012b5ada765b7c28dcb3d8d3d2418b56d10abcecd19c920ba3941240a659d42a5212da9ea938b73b6b78366a09b26994634e95b2a01915689266247acafa8545ac6b734843e03c37ee2200e0f6c48589e4ad0d6dc4fb65be5e9242ed0c4122caf720962eac6f7a2ce43ff8b00ea566e1c087d18ae08d1417bb072ac196b050849f97235c40486453d6ab19c9859951b401edb69abddb074c4b1aa1a306d4d631fcef18d46c44af74cd9c117ce817d582c70fa3ec5b7b3037b16e166165d43156c3e2b463adef2615940e9dd119582ca14e152ca3d654289ea&cpusvn=1bf8deed6f929ce40bd658e61ea722eb&pcesvn=0a00&pceid=0000&qeid=0518145496973c5e69577195511e9080")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusOK))
			})
		})
	})
})

// /pckcrl resource validation
var _ = Describe("Get PCKCRL Validation", func() {
	var router *mux.Router
	var w *httptest.ResponseRecorder
	var conf *config.Configuration
	var client domain.HttpClient

	db := getMockDatabase()
	conf = config.Load(testConfigFilePath)
	client = mocks.NewClientMock(200)

	BeforeEach(func() {
		router = mux.NewRouter()
	})

	Describe("getPckCrl Resource validation", func() {
		Context("getPckCrl request validation", func() {
			It("Should return StatusBadRequest - Insufficient query parameters", func() {
				QuoteProviderOps(router, db, conf, &client)
				req, err := http.NewRequest(http.MethodGet, "/pckcrl", nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusBadRequest - Invalid query parameters", func() {
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcrl?ca_test=processor")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusBadRequest - Invalid query parameter value given", func() {
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcrl?ca=processor_test")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusOK - Valid request", func() {
				pckCrl := &types.PckCrl{
					Ca:              "processor",
					PckCrlCertChain: "-----BEGIN%20CERTIFICATE-----%0AMIIE9DCCBJqgAwIBAgIUb6rZwuxZc5cIkp6%2Foqqz7HdGyFwwCgYIKoZIzj0EAwIw%0AcDEiMCAGA1UEAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwR%0ASW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQI%0ADAJDQTELMAkGA1UEBhMCVVMwHhcNMjIwNjIxMTEyNDU2WhcNMjkwNjIxMTEyNDU2%0AWjBwMSIwIAYDVQQDDBlJbnRlbCBTR1ggUENLIENlcnRpZmljYXRlMRowGAYDVQQK%0ADBFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNV%0ABAgMAkNBMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOB3%0AWFm1ziJAlu79StgxfAuz8AWCkoiraneuAGgrFExeiukczJvjWdtDTM2O7w8GiZAt%0A1h84AyDRUb%2BHoNaflACjggMQMIIDDDAfBgNVHSMEGDAWgBRZI9OnSqhjVC45cK3g%0ADwcrVyQqtzBvBgNVHR8EaDBmMGSgYqBghl5odHRwczovL3NieC5hcGkudHJ1c3Rl%0AZHNlcnZpY2VzLmludGVsLmNvbS9zZ3gvY2VydGlmaWNhdGlvbi92My9wY2tjcmw%2F%0AY2E9cGxhdGZvcm0mZW5jb2Rpbmc9ZGVyMB0GA1UdDgQWBBQ6mE6WHjgoVSRiUaG%2F%0A0QmQDpX7LjAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADCCAjkGCSqGSIb4%0ATQENAQSCAiowggImMB4GCiqGSIb4TQENAQEEEGzzoSC5Btq3aBE%2BWYxHhwUwggFj%0ABgoqhkiG%2BE0BDQECMIIBUzAQBgsqhkiG%2BE0BDQECAQIBATAQBgsqhkiG%2BE0BDQEC%0AAgIBATAQBgsqhkiG%2BE0BDQECAwIBADAQBgsqhkiG%2BE0BDQECBAIBADAQBgsqhkiG%0A%2BE0BDQECBQIBADAQBgsqhkiG%2BE0BDQECBgIBADAQBgsqhkiG%2BE0BDQECBwIBADAQ%0ABgsqhkiG%2BE0BDQECCAIBADAQBgsqhkiG%2BE0BDQECCQIBADAQBgsqhkiG%2BE0BDQEC%0ACgIBADAQBgsqhkiG%2BE0BDQECCwIBADAQBgsqhkiG%2BE0BDQECDAIBADAQBgsqhkiG%0A%2BE0BDQECDQIBADAQBgsqhkiG%2BE0BDQECDgIBADAQBgsqhkiG%2BE0BDQECDwIBADAQ%0ABgsqhkiG%2BE0BDQECEAIBADAQBgsqhkiG%2BE0BDQECEQIBCTAfBgsqhkiG%2BE0BDQEC%0AEgQQAQEAAAAAAAAAAAAAAAAAADAQBgoqhkiG%2BE0BDQEDBAIAADAUBgoqhkiG%2BE0B%0ADQEEBAYQYGoAAAAwDwYKKoZIhvhNAQ0BBQoBATAeBgoqhkiG%2BE0BDQEGBBDjJ4f6%0AieS5MJrtZWT28t9KMEQGCiqGSIb4TQENAQcwNjAQBgsqhkiG%2BE0BDQEHAQEB%2FzAQ%0ABgsqhkiG%2BE0BDQEHAgEBADAQBgsqhkiG%2BE0BDQEHAwEB%2FzAKBggqhkjOPQQDAgNI%0AADBFAiBJwRZ5Dkvmz41SMH%2FFojZqiPxfzpQo78iqcvTdo0DwTQIhAPzZkuFcwZUV%0Al0yBja8lgLWp%2F8eMKpx5hOAw1dDV2iST%0A-----END%20CERTIFICATE-----%0A",
				}
				db.PckCrlRepository().Create(pckCrl)

				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/pckcrl?ca=processor")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusOK))
			})
		})
	})
})

// /tcb resource validation
var _ = Describe("Get tcb info resource Validation", func() {
	var router *mux.Router
	var w *httptest.ResponseRecorder
	var conf *config.Configuration
	var client domain.HttpClient

	db := getMockDatabase()
	conf = config.Load(testConfigFilePath)
	client = mocks.NewClientMock(200)

	BeforeEach(func() {
		router = mux.NewRouter()
	})

	Describe("Get tcb info Resource validation", func() {
		Context("Get tcb info request validation", func() {
			It("Should return StatusBadRequest - Insufficient query parameters", func() {
				QuoteProviderOps(router, db, conf, &client)
				req, err := http.NewRequest(http.MethodGet, "/tcb", nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusBadRequest - Invalid query parameters", func() {
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/tcb?fmspc_test=20606a000000")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusBadRequest - Invalid query parameter value given", func() {
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/tcb?fmspc=20606_a000000")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})

			It("Should return StatusOK - Valid Request", func() {
				QuoteProviderOps(router, db, conf, &client)
				urlPath := fmt.Sprintf("/tcb?fmspc=20606a000000")
				req, err := http.NewRequest(http.MethodGet, urlPath, nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusOK))
			})
		})
	})
})

// /qe/identity resource validation
var _ = Describe("Get QeIndentiry resource Validation", func() {
	var router *mux.Router
	var w *httptest.ResponseRecorder

	var conf *config.Configuration
	var client domain.HttpClient

	db := getMockDatabase()
	conf = config.Load(testConfigFilePath)
	client = mocks.NewClientMock(200)

	BeforeEach(func() {
		router = mux.NewRouter()
	})

	Describe("Get QeIndentiry Resource validation", func() {
		Context("Get QeIndentiry request validation", func() {
			It("Should return StatusNotFound - No data present in QEIdentityRepository", func() {
				thisdb := &mock.MockDatabase{
					MockQEIdentityRepository: mock.NewMockQEIdentityRepository(),
				}
				QuoteProviderOps(router, thisdb, nil, nil)
				req, err := http.NewRequest(http.MethodGet, "/qe/identity", nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusNotFound))
			})

			It("Should return StatusOK - Insufficient query parameters", func() {

				qeIdentity := &types.QEIdentity{
					ID:            "73d1aac0-83db-4c40-8c11-6dfe5d4f4f0e",
					QeInfo:        string(qeInfo),
					QeIssuerChain: "-----BEGIN%20CERTIFICATE-----%0AMIIE9DCCBJqgAwIBAgIUb6rZwuxZc5cIkp6%2Foqqz7HdGyFwwCgYIKoZIzj0EAwIw%0AcDEiMCAGA1UEAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwR%0ASW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQI%0ADAJDQTELMAkGA1UEBhMCVVMwHhcNMjIwNjIxMTEyNDU2WhcNMjkwNjIxMTEyNDU2%0AWjBwMSIwIAYDVQQDDBlJbnRlbCBTR1ggUENLIENlcnRpZmljYXRlMRowGAYDVQQK%0ADBFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNV%0ABAgMAkNBMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOB3%0AWFm1ziJAlu79StgxfAuz8AWCkoiraneuAGgrFExeiukczJvjWdtDTM2O7w8GiZAt%0A1h84AyDRUb%2BHoNaflACjggMQMIIDDDAfBgNVHSMEGDAWgBRZI9OnSqhjVC45cK3g%0ADwcrVyQqtzBvBgNVHR8EaDBmMGSgYqBghl5odHRwczovL3NieC5hcGkudHJ1c3Rl%0AZHNlcnZpY2VzLmludGVsLmNvbS9zZ3gvY2VydGlmaWNhdGlvbi92My9wY2tjcmw%2F%0AY2E9cGxhdGZvcm0mZW5jb2Rpbmc9ZGVyMB0GA1UdDgQWBBQ6mE6WHjgoVSRiUaG%2F%0A0QmQDpX7LjAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADCCAjkGCSqGSIb4%0ATQENAQSCAiowggImMB4GCiqGSIb4TQENAQEEEGzzoSC5Btq3aBE%2BWYxHhwUwggFj%0ABgoqhkiG%2BE0BDQECMIIBUzAQBgsqhkiG%2BE0BDQECAQIBATAQBgsqhkiG%2BE0BDQEC%0AAgIBATAQBgsqhkiG%2BE0BDQECAwIBADAQBgsqhkiG%2BE0BDQECBAIBADAQBgsqhkiG%0A%2BE0BDQECBQIBADAQBgsqhkiG%2BE0BDQECBgIBADAQBgsqhkiG%2BE0BDQECBwIBADAQ%0ABgsqhkiG%2BE0BDQECCAIBADAQBgsqhkiG%2BE0BDQECCQIBADAQBgsqhkiG%2BE0BDQEC%0ACgIBADAQBgsqhkiG%2BE0BDQECCwIBADAQBgsqhkiG%2BE0BDQECDAIBADAQBgsqhkiG%0A%2BE0BDQECDQIBADAQBgsqhkiG%2BE0BDQECDgIBADAQBgsqhkiG%2BE0BDQECDwIBADAQ%0ABgsqhkiG%2BE0BDQECEAIBADAQBgsqhkiG%2BE0BDQECEQIBCTAfBgsqhkiG%2BE0BDQEC%0AEgQQAQEAAAAAAAAAAAAAAAAAADAQBgoqhkiG%2BE0BDQEDBAIAADAUBgoqhkiG%2BE0B%0ADQEEBAYQYGoAAAAwDwYKKoZIhvhNAQ0BBQoBATAeBgoqhkiG%2BE0BDQEGBBDjJ4f6%0AieS5MJrtZWT28t9KMEQGCiqGSIb4TQENAQcwNjAQBgsqhkiG%2BE0BDQEHAQEB%2FzAQ%0ABgsqhkiG%2BE0BDQEHAgEBADAQBgsqhkiG%2BE0BDQEHAwEB%2FzAKBggqhkjOPQQDAgNI%0AADBFAiBJwRZ5Dkvmz41SMH%2FFojZqiPxfzpQo78iqcvTdo0DwTQIhAPzZkuFcwZUV%0Al0yBja8lgLWp%2F8eMKpx5hOAw1dDV2iST%0A-----END%20CERTIFICATE-----%0A",
				}

				db.QEIdentityRepository().Create(qeIdentity)

				QuoteProviderOps(router, db, conf, &client)
				req, err := http.NewRequest(http.MethodGet, "/qe/identity", nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusOK))
			})
		})
	})
})

// /version resource validation
var _ = Describe("Get Version resource Validation", func() {
	var router *mux.Router
	var w *httptest.ResponseRecorder

	BeforeEach(func() {
		router = mux.NewRouter()
	})

	Describe("Get version Resource validation", func() {
		Context("Get version request validation", func() {
			It("Should return StatusOK - Valid version request", func() {
				QuoteProviderOps(router, nil, nil, nil)
				req, err := http.NewRequest(http.MethodGet, "/version", nil)
				Expect(err).NotTo(HaveOccurred())

				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusOK))
			})
		})
	})
})
